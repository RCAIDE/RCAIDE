## @ingroup Energy-Thermal_Management-Batteries
# RCAIDE/Energy/Thermal_Management/Batteries/Atmospheric_Air_Convection_Heat_Exchanger.py
# 
# 
# Created:  Jul 2023, M. Clarke 

# ----------------------------------------------------------------------------------------------------------------------
#  IMPORT
# ----------------------------------------------------------------------------------------------------------------------
 
from RCAIDE.Core import Data
from RCAIDE.Energy.Energy_Component import Energy_Component  
from RCAIDE.Attributes.Gases import Air
import numpy as np 

# ----------------------------------------------------------------------------------------------------------------------
#  Atmospheric_Air_Convection_Heat_Exchanger
# ----------------------------------------------------------------------------------------------------------------------
## @ingroup Energy-Thermal_Management-Batteries
class Direct_Air_Convection_Heat_Removal(Energy_Component):
    """This provides output values for a direct convention heat exchanger of a bettery pack
    
    Assumptions:
    None
    
    Source:
    N/A
    """
    
    def __defaults__(self):  
        self.tag                                      = 'Atmospheric_Air_Convection_Heat_Exchanger'
        self.cooling_fluid                            = Air()    
        self.cooling_fluid.flowspeed                  = 0.01                                          
        self.convective_heat_transfer_coefficient     = 35.     # [W/m^2K] 
        self.heat_transfer_efficiency                 = 1.0      
        return
    
    def compute_heat_removed(self,battery,Q_heat_gen,numerics,freestream): 
        '''Computes the net heat generate by the battery pack with an a direct atmospheric air 
        heat exchanger
        
        Assumtions:
        None
        
        Source
        None 
        
        Inputs:
        self (heat exchanger) - thermal management system                 [-]
        battery               - battery pack                              [-]
        Q_heat_gen            - thermal load generated by battery         [-]
        numerics              - RCAIDE mission numerics                   [-]
        freestream            - freestream conditions                     [-]
        
        Outputs
        hex_resylts          - battery thermal management system resukts [-]
        ''' 
         
        As_cell                  = battery.cell.surface_area 
        D_cell                   = battery.cell.diameter                     
        H_cell                   = battery.cell.height     
        T_current                = battery.pack.temperature      
        T_cell                   = battery.cell.temperature         
        T_ambient                = freestream.temperature 
        h                        = self.convective_heat_transfer_coefficient
        T_cell                   = battery.cell.temperature       
        cell_mass                = battery.cell.mass    
        Cp                       = battery.cell.specific_heat_capacity       
        I                        = numerics.time.integrate      
        heat_transfer_efficiency = self.heat_transfer_efficiency  
    
        # Calculate the current going into one cell   
        Nn                = battery.module.geometrtic_configuration.normal_count            
        Np                = battery.module.geometrtic_configuration.parallel_count    
        n_total_module    = Nn*Np  
    
        if n_total_module == 1: 
            # Using lumped model   
            Q_convec       = h*As_cell*(T_cell - T_ambient)
            Q_heat_gen_tot = Q_heat_gen
            P_net          = Q_heat_gen_tot - Q_convec
    
        else:   
            K_coolant                    = freestream.thermal_conductivity
            nu_coolant                   = freestream.kinematic_viscosity
            Pr_coolant                   = freestream.prandtl_number
            rho_coolant                  = freestream.density    
            Cp_coolant                   = self.cooling_fluid.compute_cp(freestream.temperature,freestream.pressure )
            V_coolant                    = self.cooling_fluid.flowspeed  
    
            # Chapter 7 pg 437-446 of Fundamentals of heat and mass transfer 
            S_T             = battery.module.geometrtic_configuration.normal_spacing          
            S_L             = battery.module.geometrtic_configuration.parallel_spacing
    
            S_D = np.sqrt(S_T**2+S_L**2)
            if 2*(S_D-D_cell) < (S_T-D_cell):
                V_max = V_coolant*(S_T/(2*(S_D-D_cell)))
            else:
                V_max = V_coolant*(S_T/(S_T-D_cell))
    
            T        = (T_ambient+T_current)/2   
            Re_max   = V_max*D_cell/nu_coolant   
            if all(Re_max) > 10E2: 
                C = 0.35*((S_T/S_L)**0.2) 
                m = 0.6 
            else:
                C = 0.51
                m = 0.5  
    
            Pr_w_coolant          = self.cooling_fluid.compute_prandtl_number(T)            
            Nu                    = C*(Re_max**m)*(Pr_coolant**0.36)*((Pr_coolant/Pr_w_coolant)**0.25)           
            h                     = Nu*K_coolant/D_cell
            Tw_Ti                 = (T - T_ambient)
            Tw_To                 = Tw_Ti * np.exp((-np.pi*D_cell*n_total_module*h)/(rho_coolant*V_coolant*Nn*S_T*Cp_coolant))
            dT_lm                 = (Tw_Ti - Tw_To)/np.log(Tw_Ti/Tw_To)
            Q_convec              = heat_transfer_efficiency*h*np.pi*D_cell*H_cell*n_total_module*dT_lm 
            Q_convec[Tw_Ti == 0.] = 0.
            Q_heat_gen_tot        = Q_heat_gen*n_total_module  
            P_net                 = Q_heat_gen_tot - Q_convec 
    
        dT_dt                  = P_net/(cell_mass*n_total_module*Cp)
        T_current              = T_current[0] + np.dot(I,dT_dt)  
        T_current[T_ambient>T_current] = T_ambient[T_ambient>T_current]
     
        hex_results = Data()
        hex_results.operating_conditions = Data(battery_current_temperature = T_current,
                                                 heat_energy_generated       = Q_heat_gen_tot )   
        return hex_results
        
