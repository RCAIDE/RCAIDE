## @ingroup Energy-Thermal_Management-Batteries-Heat_Removal_Systems
# RCAIDE/Energy/Thermal_Management/Batteries/Heat_Removal_Systems/No_Removal_System.py
# (c) Copyright 2023 Aerospace Research Community LLC
# 
# Created:  Jul 2023, M. Clarke 

# ----------------------------------------------------------------------------------------------------------------------
#  IMPORT
# ----------------------------------------------------------------------------------------------------------------------
 
from RCAIDE.Core import Data
from RCAIDE.Energy.Energy_Component import Energy_Component  
import numpy as np 

# ----------------------------------------------------------------------------------------------------------------------
#  No_Heat_Exchanger
# ----------------------------------------------------------------------------------------------------------------------
## @ingroup Energy-Thermal_Management-Batteries-Heat_Removal_Systems
class No_Heat_Removal_System(Energy_Component):
    """This provides output values for a direct convention heat exchanger of a bettery pack
    
    Assumptions:
    None
    
    Source:
    N/A
    """
    
    def __defaults__(self):  
        self.tag   = 'No_Removal_System'
        return
    
    def compute_net_generated_battery_heat(self,battery,Q_heat_gen,numerics,freestream): 
        '''Computes the net heat generate by the battery pack with no heat exchanger
        heat exchanger
        
        Assumtions:
        None
        
        Source
        None 
        
        Inputs:
        self (heat exchanger) - thermal management system                 [-]
        battery               - battery pack                              [-]
        Q_heat_gen            - thermal load generated by battery         [-]
        numerics              - RCAIDE mission numerics                   [-]
        freestream            - freestream conditions                     [-]
        
        Outputs
        btms_resylts          - battery thermal management system resukts [-]
        '''
    
        T_current                = battery.pack.temperature     
        cell_mass                = battery.cell.mass    
        Cp                       = battery.cell.specific_heat_capacity       
        I                        = numerics.time.integrate        
    
        # Calculate the current going into one cell   
        Nn                = battery.module.geometrtic_configuration.normal_count            
        Np                = battery.module.geometrtic_configuration.parallel_count    
        n_total_module    = Nn*Np  
        
        if n_total_module == 1:    
            Q_heat_gen_tot = Q_heat_gen
            P_net          = Q_heat_gen_tot   
        else:     
            Q_heat_gen_tot        = Q_heat_gen*n_total_module  
            P_net                 = Q_heat_gen_tot  
         
        dT_dt                  = P_net/(cell_mass*n_total_module*Cp)
        T_current              = T_current[0] + np.dot(I,dT_dt)   

        btms_results = Data()
        btms_results.operating_conditions = Data(battery_current_temperature = T_current,
                                                 heat_energy_generated       = Q_heat_gen_tot )   
        return btms_results
        
