## @ingroup Library-Components-Thermal_Management-Batteries-Heat_Acquisition_Systems
# RCAIDE/Library/Components/Thermal_Management/Batteries/Heat_Acquisition_Systems/Conjugate_Heat_Acquisition.py
# 
# 
# Created:  Apr 2024 S. Shekar 

# ----------------------------------------------------------------------------------------------------------------------
#  IMPORT
# ----------------------------------------------------------------------------------------------------------------------
# RCAIDE imports  
from RCAIDE.Framework.Core                              import Units
from RCAIDE.Library.Attributes.Coolants.Glycol_Water    import Glycol_Water
from RCAIDE.Library.Components.Component                import Component  
from RCAIDE.Library.Attributes.Materials.Aluminum       import Aluminum
from RCAIDE.Library.Methods.Energy.Thermal_Management.Batteries.Wavy_Channel_Heat_Acquisition.wavy_channel_rating_model import  wavy_channel_rating_model 

# ----------------------------------------------------------------------------------------------------------------------
# Conjugate_Heat_Removal_System  
# ----------------------------------------------------------------------------------------------------------------------
## @ingroup Library-Compoments-Thermal_Management-Batteries-Heat_Acquisition_Systems
class Liquid_Cooled_Wavy_Channel(Component):
    '''
       Wavy Channel Heat Acqusition System
    '''
    
    def __defaults__(self):  
        """This sets the default values.
    
        Assumptions:
           The wavy channel heat Acquisition loops through the battery pack.
           The coolant is assumed to be Glycol Water unless specified otherwise. 
           The geometry parameters are set based on nomrinal values to be further optmized.
           
        
        Source: 
        
        """            
         
        self.tag                           = 'Wavy_Channel_Heat_Acquisition' 
        self.heat_transfer_efficiency      = 1
        self.coolant                       = Glycol_Water()
        self.coolant_Reynolds_number       = 1.
        self.coolant_velocity              = 1.
        self.coolant_flow_rate             = 1
        self.coolant_inlet_temperature     = None
        self.coolant_hydraulic_diameter    = 1.
        self.channel_side_thickness        = 0.001                  # Thickness of the Chanel through which condcution occurs 
        self.channel_top_thickness         = 0.001                  # Thickness of Channel on the top where no conduction occurs
        self.channel_width                 = 0.005                  # width of the channel 
        self.channel_height                = 0.003                  # height of the channel 
        self.channel_contact_angle         = 47.5 * Units.degrees   # Contact Arc angle in degrees    
        self.channel                       = Aluminum()
        self.channel_aspect_ratio          = 1. 
        self.channels_per_module           = 1
        self.battery_contact_area          = 1.
        self.contact_area_per_module       = 1.  
        self.power_draw                    = 1. 
        self.single_side_contact           = True 
        self.design_heat_removed           = None   
        self.percent_operation             = 1.0 
        
        return
    
    def compute_heat_removed(HAS,battery_conditions,battery,Q_heat_cell,state,dt,i):
        '''Computes the net heat generated by the battery pack with Wavy Channel heat 
        acquisition system
        
        Assumtions:
        None
        
        Source
        None 
        
        Inputs:
        HAS                   - heat acquisition system                        [-]
        battery_conditions    - battery pack conditions                        [-]
        Q_heat_cell           - thermal load generated by battery cell         [W] 
        T_cell                - temperature of the battery cell                [K]
        state                 - conditions of system                           [-]
        dt                    - time step                                      [s]
        i                     - control point                                  [-] 
        ''' 
        
        wavy_channel_rating_model(HAS,battery_conditions,battery, Q_heat_cell, state, dt, i)
        # HEX RES
    
        
        return  