## @ingroup Library-Compoments-Thermal_Management-Batteries-Heat_Acquisition_Systems
# RCAIDE/Library/Compoments/Thermal_Management/Batteries/Heat_Acquisition_Systems/Direct_Air.py
# (c) Copyright 2023 Aerospace Research Community LLC
# 
# Created:  , M. Clarke 

# ----------------------------------------------------------------------------------------------------------------------
#  IMPORT
# ----------------------------------------------------------------------------------------------------------------------
  
from RCAIDE.Library.Components import Component  
from RCAIDE.Library.Methods.Thermal_Management.Batteries.Heat_Acquisition_Systems.Direct_Air_Heat_Aquistion import direct_convection_model
from RCAIDE.Library.Attributes.Gases import Air 

# ----------------------------------------------------------------------------------------------------------------------
#  Atmospheric_Air_Convection_Heat_Exchanger
# ----------------------------------------------------------------------------------------------------------------------
## @ingroup Library-Compoments-Thermal_Management-Batteries-Heat_Acquisition_Systems
class Direct_Air(Component):
    """This provides output values for a direct convention heat exchanger of a bettery pack.
    """
    
    def __defaults__(self): 
        """This sets the default.

        Assumptions:
            None

        Source:
            None 
        """                   
        self.tag                                      = 'Direct_Air_Heat_Acquisition_System'
        self.cooling_fluid                            = Air()    
        self.cooling_fluid.flowspeed                  = 0.01                                          
        self.convective_heat_transfer_coefficient     = 35.     # [W/m^2K] 
        self.heat_transfer_efficiency                 = 1.0      
        return
    
    def compute_heat_removed(HAS,battery,Q_heat_gen,T_cell,state,dt,i): 
        '''Computes the net heat generated by the battery pack with direct air cooling heat 
        acquisition system
        
        Assumtions:
            None
        
        Source
            None 
        
        Inputs:
            HAS                     (dict): heat acquisition system                        [-]
            battery                 (dict): battery pack                                   [-]
            Q_heat_gen     (numpy.ndarray): thermal load generated by battery              [W] 
            T_cell         (numpy.ndarray): temperature of the battery cell                [K]
            state                   (dict): conditions of system                           [-]
            dt                     (float): time step                                      [s]
            i                        (int): control point                                  [unitless]
        
        Outputs
        HAS_outputs
            .Q_heat_gen_tot  (numpy.ndarray): total heat generated by pack                   [W]
            .Q_net           (numpy.ndarray): net heat accumulated in battery pack           [W]
            .T_current       (numpy.ndarray): updated battery temperature at new timestep    [K]
        ''' 
        
        HAS_outputs = direct_convection_model(HAS, battery, Q_heat_gen, T_cell, state, dt, i)
         
        return HAS_outputs
        
