## @ingroup Energy-Thermal_Management-Batteries-Heat_Acquisition_Systems
# RCAIDE/Energy/Thermal_Management/Batteries/Heat_Acquisition_Systems/Direct_Air.py
# 
# 
# Created:  Jul 2023, M. Clarke
# Modified: Aug 2024, S. Shekar 

# ----------------------------------------------------------------------------------------------------------------------
#  IMPORT
# ----------------------------------------------------------------------------------------------------------------------
  
from RCAIDE.Library.Components import Component  
from RCAIDE.Library.Methods.Thermal_Management.Batteries.Air_Cooled import append_air_cooled_conditions, air_cooling_performance, append_air_cooled_segment_conditions
from RCAIDE.Library.Attributes.Gases import Air
from RCAIDE.Library.Plots.Thermal_Management.plot_air_cooled_conditions import  plot_air_cooled_conditions

# ----------------------------------------------------------------------------------------------------------------------
#  Atmospheric_Air_Convection_Heat_Exchanger
# ----------------------------------------------------------------------------------------------------------------------
## @ingroup Energy-Thermal_Management-Batteries-Heat_Acquisition_Systems
class Air_Cooled(Component):
    """This provides output values for a direct convention heat exchanger of a bettery pack
    
    Assumptions:
    None
    
    Source:
    N/A
    """
    
    def __defaults__(self):  
        self.tag                                      = 'Air_Cooled'
        self.cooling_fluid                            = Air()    
        self.cooling_fluid.flowspeed                  = 0.01                                          
        self.convective_heat_transfer_coefficient     = 35.     # [W/m^2K] 
        self.heat_transfer_efficiency                 = 1.0      
   
    
    def append_operating_conditions(self,segment,coolant_line,add_additional_network_equation = False):
        append_air_cooled_conditions(self,segment,coolant_line,add_additional_network_equation)
        return
    def append_segment_conditions(self, segment,coolant_line, conditions):
        append_air_cooled_segment_conditions(self, segment,coolant_line, conditions)
        return
    
    
    def compute_thermal_performance(self,battery,coolant_line, Q_heat_gen,T_cell,state,dt,i): 
        '''Computes the net heat generated by the battery pack with direct air cooling heat 
        acquisition system
        
        Assumtions:
        None
        
        Source
        None 
        
        Inputs:
        self                  - heat acquisition system                         [-]
        battery               - battery pack                                   [-]
        Q_heat_gen            - thermal load generated by battery              [W] 
        T_cell                - temperature of the battery cell                [K]
        state                 - conditions of system                           [-]
        dt                    - time step                                      [s]
        i                     - control point                                  [-]
        
        Outputs 
        T_current             - updated battery temperature at new timestep    [K]
        ''' 
        
        T_battery_current = air_cooling_performance(self, battery, coolant_line, Q_heat_gen, T_cell, state, dt, i)
         
        return T_battery_current

    def plot_operating_conditions(self, results, coolant_line, save_figure = False,show_legend = True,save_filename = "Heat Acquisition System",file_type = ".png",
                                  width = 12, height = 7):
        plot_air_cooled_conditions(self, results, coolant_line, save_figure,show_legend ,save_filename,file_type , width, height)
        
        return
        
